name: Deploy Web

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  FLUTTER_VERSION: '3.27.0'

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      firebase-project: ${{ steps.set-env.outputs.firebase-project }}
      firebase-channel: ${{ steps.set-env.outputs.firebase-channel }}
      hosting-url: ${{ steps.set-env.outputs.hosting-url }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="staging"
          else
            ENV="staging"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          if [[ "$ENV" == "production" ]]; then
            echo "firebase-project=gcp-f06-barcode" >> $GITHUB_OUTPUT
            echo "firebase-channel=live" >> $GITHUB_OUTPUT
            echo "hosting-url=https://gcp-f06-barcode.web.app" >> $GITHUB_OUTPUT
          else
            echo "firebase-project=gcp-f06-barcode" >> $GITHUB_OUTPUT
            echo "firebase-channel=staging" >> $GITHUB_OUTPUT
            echo "hosting-url=https://staging-gcp-f06-barcode.web.app" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            .packages
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Get dependencies
        run: flutter pub get

      - name: Build Web for ${{ needs.determine-environment.outputs.environment }}
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            flutter build web --release \
              --dart-define=ENVIRONMENT=production \
              --dart-define=API_BASE_URL=https://api.gcp-f06-barcode.com \
              --no-tree-shake-icons
          else
            flutter build web --release \
              --dart-define=ENVIRONMENT=staging \
              --dart-define=API_BASE_URL=https://staging-api.gcp-f06-barcode.com \
              --no-tree-shake-icons
          fi

      - name: Optimize assets
        run: |
          # HTMLを圧縮
          find build/web -name "*.html" -exec html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js {} -o {} \; 2>/dev/null || true
          
          # 画像を最適化
          find build/web -name "*.png" -exec optipng -o5 {} \; 2>/dev/null || true
          find build/web -name "*.jpg" -exec jpegoptim --strip-all {} \; 2>/dev/null || true

      - name: Add version info
        run: |
          echo "{
            \"version\": \"${{ github.sha }}\",
            \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"environment\": \"${{ needs.determine-environment.outputs.environment }}\",
            \"branch\": \"${{ github.ref_name }}\"
          }" > build/web/version.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ needs.determine-environment.outputs.environment }}
          path: build/web/
          retention-days: 30

  deploy-firebase-hosting:
    name: Deploy to Firebase Hosting
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build-${{ needs.determine-environment.outputs.environment }}
          path: build/web/

      - name: Set Firebase Service Account
        id: firebase-account
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            echo "service_account=${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "service_account=${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ steps.firebase-account.outputs.service_account }}
          channelId: ${{ needs.determine-environment.outputs.firebase-channel }}
          projectId: ${{ needs.determine-environment.outputs.firebase-project }}
          target: ${{ needs.determine-environment.outputs.environment }}

      - name: Get deployment URL
        id: deploy-url
        run: |
          echo "url=${{ needs.determine-environment.outputs.hosting-url }}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Deployed to ${{ needs.determine-environment.outputs.environment }}!\n\nURL: ${{ steps.deploy-url.outputs.url }}\nCommit: ${{ github.sha }}`
            })

  deploy-cloud-functions:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-firebase-hosting]
    if: needs.determine-environment.outputs.environment == 'production' || needs.determine-environment.outputs.environment == 'staging'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        working-directory: functions
        run: npm ci

      - name: Run tests
        working-directory: functions
        run: npm test
        continue-on-error: true

      - name: Deploy Functions
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            firebase deploy --only functions --project ${{ needs.determine-environment.outputs.firebase-project }}
          else
            firebase deploy --only functions:staging --project ${{ needs.determine-environment.outputs.firebase-project }}
          fi
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-firebase-hosting]
    if: needs.determine-environment.outputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.determine-environment.outputs.hosting-url }}
            ${{ needs.determine-environment.outputs.hosting-url }}/scanner
            ${{ needs.determine-environment.outputs.hosting-url }}/products
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

      - name: WebPageTest
        run: |
          # WebPageTest API を使用したパフォーマンステスト
          curl -X POST "https://www.webpagetest.org/runtest.php" \
            -d "url=${{ needs.determine-environment.outputs.hosting-url }}" \
            -d "k=${{ secrets.WEBPAGETEST_API_KEY }}" \
            -d "f=json" \
            -d "lighthouse=1"
        continue-on-error: true

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-firebase-hosting]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm install -D @playwright/test
          npx playwright install chromium

      - name: Run smoke tests
        run: |
          cat > smoke-test.js << 'EOF'
          const { chromium } = require('@playwright/test');
          
          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext();
            const page = await context.newPage();
            
            const url = '${{ needs.determine-environment.outputs.hosting-url }}';
            
            // ホームページの確認
            await page.goto(url);
            await page.waitForLoadState('networkidle');
            console.log('✅ Home page loaded');
            
            // 主要な要素の確認
            const title = await page.title();
            console.log(`Page title: ${title}`);
            
            // スキャナーページ
            await page.goto(`${url}/scanner`);
            await page.waitForLoadState('networkidle');
            console.log('✅ Scanner page loaded');
            
            // 商品ページ
            await page.goto(`${url}/products`);
            await page.waitForLoadState('networkidle');
            console.log('✅ Products page loaded');
            
            await browser.close();
            console.log('✅ All smoke tests passed');
          })();
          EOF
          
          node smoke-test.js

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-firebase-hosting, deploy-cloud-functions, smoke-test]
    if: always()
    steps:
      - name: Deployment notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.smoke-test.result }}"
          COLOR=$([ "$STATUS" = "success" ] && echo "good" || echo "danger")
          EMOJI=$([ "$STATUS" = "success" ] && echo ":rocket:" || echo ":warning:")
          ENV="${{ needs.determine-environment.outputs.environment }}"
          URL="${{ needs.determine-environment.outputs.hosting-url }}"
          
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"$EMOJI Deployment to $ENV $STATUS\",
                \"text\": \"URL: $URL\\nBranch: ${{ github.ref_name }}\\nCommit: ${{ github.sha }}\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"$ENV\", \"short\": true},
                  {\"title\": \"Version\", \"value\": \"${{ github.sha }}\", \"short\": true}
                ],
                \"footer\": \"GitHub Actions\",
                \"footer_icon\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\",
                \"ts\": $(date +%s)
              }]
            }"
