name: "もう一品機能強化 - 現在の実装状況"
version: "1.0"
date: "2025-01-19"
author: "Claude AI Assistant"

# 現在の「もう一品」機能実装状況の分析

## 現在の実装レベル

### UI実装 ✅
location: "lib/features/meal_planning/presentation/pages/meal_plan_screen.dart"
implementation_status: "完全実装済み"
features:
  - square_card_button: "2x2グリッドの右下に配置済み"
  - dialog_ui: "ジャンル選択ダイアログ実装済み"
  - dish_options: "副菜・汁物・おつまみの選択肢"
  - loading_dialog: "ローディング表示実装済み"

ui_components:
  main_button:
    location: "Line 327-330"
    code: |
      MealPlanSquareCard(
        title: 'もう一品',
        isAddButton: true,
        onTap: () => _suggestAdditionalDish(mealPlan),
      )
  
  selection_dialog:
    location: "Line 1355-1414"
    features:
      - title: "もう一品追加"
      - options: ["副菜", "汁物", "おつまみ"]
      - ui_style: "統一されたクリーム色基調"
  
  dish_option_widget:
    location: "Line 1416-1470"
    features:
      - icon_display: "各ジャンルのアイコン"
      - description: "ジャンル説明文"
      - tap_interaction: "タップ時のアクション"

### ビジネスロジック ❌
implementation_status: "スタブ実装のみ"
current_behavior:
  - loading_simulation: "2秒のFuture.delayed"
  - placeholder_message: "「○○の提案機能は準備中です」"
  - no_actual_generation: "実際の料理生成なし"

stub_implementation:
  location: "Line 1472-1516"
  code: |
    Future<void> _addAdditionalDish(String dishType) async {
      // 仮の処理（将来的にAI呼び出しに置き換え）
      await Future.delayed(Duration(seconds: 2));
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${dishType}の提案機能は準備中です'),
        ),
      );
    }

### データモデル ❌
additional_dish_fields: "MealPlanモデルに未実装"
current_meal_plan_structure:
  - mainDish: "MealItem ✅"
  - sideDish: "MealItem ✅"
  - soup: "MealItem ✅"
  - rice: "MealItem ✅"
  - additionalDishes: "未実装 ❌"

missing_fields:
  - additionalMainDish: "追加主菜"
  - additionalSideDish: "追加副菜"
  - additionalSoup: "追加汁物"
  - additionalSnack: "おつまみ"

### AI サービス連携 ❌
current_ai_service: "lib/core/services/ai_meal_planning_service.dart"
existing_methods:
  - suggestMealPlan: "基本4品構成の献立生成 ✅"
  - suggestAlternatives: "代替献立生成 ✅"
  - generateShoppingList: "買い物リスト生成 ✅"

missing_methods:
  - generateAdditionalDishes: "追加料理生成機能 ❌"
  - getAdditionalDishByType: "ジャンル別追加料理取得 ❌"

## 問題点と改善が必要な箇所

### 1. 事前生成機能の不在
current_problem: "ユーザーが選択してから料理を生成する設計"
desired_behavior: "献立提案時に全ジャンルの追加料理を事前生成"
impact: "応答時間の遅延とユーザー体験の悪化"

### 2. データ保存機能の不在
current_problem: "生成された追加料理の保存機能なし"
desired_behavior: "MealPlanと一緒に追加料理も保存"
impact: "再表示時の一貫性がない"

### 3. ADK連携の不備
current_problem: "ADK APIとの連携が未実装"
desired_behavior: "ADKで全ジャンルの追加料理を同時生成"
impact: "実際の料理提案ができない"

### 4. UI表示機能の不完全性
current_problem: "生成された料理の詳細表示機能なし"
desired_behavior: "選択されたジャンルの料理詳細を表示"
impact: "ユーザーが料理内容を確認できない"

## 技術的制約と考慮事項

### ADK API制約
current_api_structure:
  - single_meal_generation: "1回のリクエストで1つの献立生成"
  - no_batch_generation: "複数料理の一括生成機能なし"

required_enhancement:
  - extended_prompt: "追加料理も含めた拡張プロンプト"
  - response_parsing: "複数料理を含むレスポンス解析"

### データベース設計
current_firestore_structure:
  collection: "meal_plans"
  document_structure: "基本4品のみ"

required_extension:
  additional_fields:
    - additionalDishes: "Map<String, MealItem>"
    - additionalDishesGenerated: "bool"
    - additionalDishesGeneratedAt: "DateTime"

### パフォーマンス考慮
generation_timing: "献立生成時に追加料理も同時生成"
response_time_impact: "生成時間の増加（推定1.5-2倍）"
caching_strategy: "生成済み追加料理のキャッシュ"

## 既存機能との整合性

### UI統一性 ✅
color_scheme: "既存のクリーム色基調と統一済み"
component_style: "MealPlanSquareCardとの一貫性"
interaction_pattern: "既存のダイアログパターンと統一"

### 状態管理 🔄
current_provider: "MealPlanNotifier"
required_extension: "追加料理の状態管理機能"
integration_point: "既存のmealPlanProviderの拡張"

### エラーハンドリング 🔄
current_handling: "基本的なtry-catch実装"
required_enhancement: "追加料理生成失敗時の適切な処理"

## 実装優先度

### 高優先度
1. MealPlanモデルの拡張（追加料理フィールド）
2. AI献立サービスの拡張（事前生成機能）
3. 追加料理表示UI の実装

### 中優先度
4. Firestoreスキーマの拡張
5. エラーハンドリングの強化
6. パフォーマンス最適化

### 低優先度
7. 追加料理の画像生成連携
8. 追加料理の栄養情報計算
9. 統計・分析機能への反映

## 実装可能性評価

### 技術的実現可能性: ⭐⭐⭐⭐☆ (高)
- 既存のAIサービス基盤を活用可能
- データモデルの拡張は比較的簡単
- UI実装はほぼ完成済み

### 実装工数: ⭐⭐⭐☆☆ (中)
- 推定実装期間: 2-3日
- 主要な作業: AIサービス拡張、データモデル修正
- テスト工数: 1日

### 運用影響度: ⭐⭐☆☆☆ (低)
- 既存機能への影響最小限
- 段階的リリース可能
- ロールバック容易

## 次のステップ

1. **データモデル設計**: 追加料理フィールドの詳細設計
2. **AIプロンプト設計**: 全ジャンル同時生成のプロンプト作成
3. **UI詳細設計**: 追加料理表示画面の設計
4. **実装計画策定**: 段階的実装スケジュールの作成
