version: 1
request: "開発環境の構築方法と Cloud Run/Docker 採用可否の判断"
date: 2025-08-16

principles:
  - "モバイルはローカル実機/エミュレータで高速開発"
  - "バックエンドは Firebase Emulator Suite + ローカルコンテナで再現"
  - "本番はサーバーレス優先（Cloud Functions/Cloud Run）"
  - "最初は単一リポ/最小構成、段階的に分割"

decisions:
  flutter:
    use_fvm: true
    min_flutter: "3.22"
  firebase:
    emulator_suite: [auth, firestore, storage, functions]
    use_flutterfire_cli: true
  backend:
    cloud_functions: true
    cloud_run: true
    container_registry: "Artifact Registry"
  container:
    local_dev: "docker compose"
    base_image: "gcr.io/distroless/nodejs20"
    runtime: "Node.js 20 (Functions), Python/Node (Cloud Run)"
  ci_cd:
    platform: "GitHub Actions"
    gates: [format, analyze, test, build]
  secrets:
    strategy: ".env.local + GitHub Encrypted Secrets + GCP Secret Manager"

deliverables:
  - "docs/dev-env-setup/updated.yaml"
  - "Dockerfile と docker-compose.yml の雛形"
  - "firebase.json と firestore.rules, storage.rules"
  - ".firebaserc と flutterfire 設定"
  - ".github/workflows/ci.yml"

phases:
  - name: "準備"
    steps:
      - "FVM 導入、Flutter SDK 固定"
      - "Flutter プロジェクト scaffold"
      - "FlutterFire CLI で Firebase 連携"
  - name: "ローカルエミュレーション"
    steps:
      - "firebase.json と emulators 設定"
      - "Functions の Node.js 20 プロジェクト作成"
      - "docker-compose で Cloud Run 相当の API をローカル起動"
  - name: "CI/CD"
    steps:
      - "lint/format/analyze/settings 追加"
      - "unit/widget/integration tests 追加"
      - "Actions でエミュレーターを用いたテスト実行"


