# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.mocks.dart"
  errors:
    # Treat all warnings as info to prevent CI failure
    unused_local_variable: info
    unused_import: info
    unused_field: info
    unused_element: info
    equal_keys_in_map: info
    dead_code: info
    unreachable_switch_default: info
    unnecessary_non_null_assertion: info
    unnecessary_cast: info
    unnecessary_null_comparison: info
    unnecessary_type_check: info
    asset_does_not_exist: info  # Treat missing asset warnings as info
    invalid_use_of_visible_for_testing_member: info  # StateNotifier warnings
    invalid_use_of_protected_member: info  # StateNotifier warnings
    dead_null_aware_expression: info  # Null-aware operator warnings
    invalid_null_aware_operator: info  # Null-aware operator warnings

linter:
  rules:
    avoid_print: false  # Disable the `avoid_print` rule for development
    avoid_types_as_parameter_names: false
    unnecessary_brace_in_string_interps: false
    use_super_parameters: false
    annotate_overrides: false
    curly_braces_in_flow_control_structures: false
    unintended_html_in_doc_comment: false
    prefer_interpolation_to_compose_strings: false

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
