// Mocks generated by Mockito 5.4.6 from annotations
// in barcode_scanner/test/features/meal_planning/services/ai_meal_planning_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:barcode_scanner/core/services/ai_meal_planning_service.dart'
    as _i3;
import 'package:barcode_scanner/shared/models/meal_plan.dart' as _i2;
import 'package:barcode_scanner/shared/models/product.dart' as _i5;
import 'package:barcode_scanner/shared/models/shopping_item.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMealPlan_0 extends _i1.SmartFake implements _i2.MealPlan {
  _FakeMealPlan_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AIMealPlanningService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIMealPlanningService extends _i1.Mock
    implements _i3.AIMealPlanningService {
  MockAIMealPlanningService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.MealPlan> suggestMealPlan({
    required List<_i5.Product>? refrigeratorItems,
    required String? householdId,
    required _i3.UserPreferences? preferences,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #suggestMealPlan,
          [],
          {
            #refrigeratorItems: refrigeratorItems,
            #householdId: householdId,
            #preferences: preferences,
          },
        ),
        returnValue: _i4.Future<_i2.MealPlan>.value(_FakeMealPlan_0(
          this,
          Invocation.method(
            #suggestMealPlan,
            [],
            {
              #refrigeratorItems: refrigeratorItems,
              #householdId: householdId,
              #preferences: preferences,
            },
          ),
        )),
      ) as _i4.Future<_i2.MealPlan>);

  @override
  _i4.Future<List<_i2.MealPlan>> suggestAlternatives({
    required _i2.MealPlan? originalMealPlan,
    required List<_i5.Product>? refrigeratorItems,
    required String? householdId,
    required _i3.UserPreferences? preferences,
    required String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #suggestAlternatives,
          [],
          {
            #originalMealPlan: originalMealPlan,
            #refrigeratorItems: refrigeratorItems,
            #householdId: householdId,
            #preferences: preferences,
            #reason: reason,
          },
        ),
        returnValue: _i4.Future<List<_i2.MealPlan>>.value(<_i2.MealPlan>[]),
      ) as _i4.Future<List<_i2.MealPlan>>);

  @override
  List<_i6.ShoppingItem> generateShoppingList(_i2.MealPlan? mealPlan) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateShoppingList,
          [mealPlan],
        ),
        returnValue: <_i6.ShoppingItem>[],
      ) as List<_i6.ShoppingItem>);
}
