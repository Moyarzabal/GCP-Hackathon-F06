// Mocks generated by Mockito 5.4.6 from annotations
// in barcode_scanner/test/core/errors/error_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:barcode_scanner/core/errors/error_reporter.dart' as _i3;
import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLevel_1 extends _i1.SmartFake implements _i2.Level {
  _FakeLevel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ErrorReporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorReporter extends _i1.Mock implements _i3.ErrorReporter {
  MockErrorReporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeLogger_0(this, Invocation.getter(#logger)),
          )
          as _i2.Logger);

  @override
  _i4.Future<void> reportError(
    Object? error, {
    StackTrace? stackTrace,
    String? context,
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #reportError,
              [error],
              {#stackTrace: stackTrace, #context: context, #fatal: fatal},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i3.ErrorSeverity getErrorSeverity(Object? error) =>
      (super.noSuchMethod(
            Invocation.method(#getErrorSeverity, [error]),
            returnValue: _i3.ErrorSeverity.info,
          )
          as _i3.ErrorSeverity);

  @override
  _i4.Future<Map<String, dynamic>> collectDeviceInfo() =>
      (super.noSuchMethod(
            Invocation.method(#collectDeviceInfo, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  Map<String, dynamic> formatErrorForReporting(
    Object? error, {
    StackTrace? stackTrace,
    String? context,
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #formatErrorForReporting,
              [error],
              {#stackTrace: stackTrace, #context: context, #fatal: fatal},
            ),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void addBreadcrumb(
    String? message, {
    String? category,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #addBreadcrumb,
      [message],
      {#category: category, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  List<Map<String, dynamic>> getBreadcrumbs() =>
      (super.noSuchMethod(
            Invocation.method(#getBreadcrumbs, []),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  void setUserContext({
    String? userId,
    String? email,
    String? name,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#setUserContext, [], {
      #userId: userId,
      #email: email,
      #name: name,
      #extra: extra,
    }),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> getUserContext() =>
      (super.noSuchMethod(
            Invocation.method(#getUserContext, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void clearUserContext() => super.noSuchMethod(
    Invocation.method(#clearUserContext, []),
    returnValueForMissingStub: null,
  );

  @override
  void setTag(String? key, String? value) => super.noSuchMethod(
    Invocation.method(#setTag, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, String> getTags() =>
      (super.noSuchMethod(
            Invocation.method(#getTags, []),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i2.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  Map<String, _i2.Logger> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <String, _i2.Logger>{},
          )
          as Map<String, _i2.Logger>);

  @override
  String get fullName =>
      (super.noSuchMethod(
            Invocation.getter(#fullName),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#fullName),
            ),
          )
          as String);

  @override
  _i2.Level get level =>
      (super.noSuchMethod(
            Invocation.getter(#level),
            returnValue: _FakeLevel_1(this, Invocation.getter(#level)),
          )
          as _i2.Level);

  @override
  _i4.Stream<_i2.Level?> get onLevelChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onLevelChanged),
            returnValue: _i4.Stream<_i2.Level?>.empty(),
          )
          as _i4.Stream<_i2.Level?>);

  @override
  _i4.Stream<_i2.LogRecord> get onRecord =>
      (super.noSuchMethod(
            Invocation.getter(#onRecord),
            returnValue: _i4.Stream<_i2.LogRecord>.empty(),
          )
          as _i4.Stream<_i2.LogRecord>);

  @override
  set level(_i2.Level? value) => super.noSuchMethod(
    Invocation.setter(#level, value),
    returnValueForMissingStub: null,
  );

  @override
  void clearListeners() => super.noSuchMethod(
    Invocation.method(#clearListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  bool isLoggable(_i2.Level? value) =>
      (super.noSuchMethod(
            Invocation.method(#isLoggable, [value]),
            returnValue: false,
          )
          as bool);

  @override
  void log(
    _i2.Level? logLevel,
    Object? message, [
    Object? error,
    StackTrace? stackTrace,
    _i4.Zone? zone,
  ]) => super.noSuchMethod(
    Invocation.method(#log, [logLevel, message, error, stackTrace, zone]),
    returnValueForMissingStub: null,
  );

  @override
  void finest(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#finest, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void finer(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#finer, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fine(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fine, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void config(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#config, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void severe(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#severe, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void shout(Object? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#shout, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}
